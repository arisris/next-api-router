{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import type { NextApiRequest, NextApiResponse } from \"next\";\n\nexport interface NextApiRouterRequest extends NextApiRequest {\n  params?: Record<any, any>;\n}\nexport type NextApiRouteHandler = (\n  req: NextApiRouterRequest,\n  res: NextApiResponse\n) => void | Promise<void>;\nexport class TimeoutError extends Error {}\ntype OnErrorCallback = (\n  e: Error,\n  req: NextApiRouterRequest,\n  res: NextApiResponse\n) => void;\nexport default function NextApiRouter(options?: {\n  key?: string;\n  timeout?: number;\n  onError?: OnErrorCallback;\n}) {\n  let { key, timeout, onError } = Object.assign(\n      {\n        key: \"any\",\n        timeout: 10000,\n        onError: (e: Error, _: NextApiRouterRequest, res: NextApiResponse) => {\n          if (e instanceof TimeoutError) {\n            res.status(500).send(\"<h3>Timeout Error</h3>\");\n          } else {\n            throw e;\n          }\n        },\n      },\n      options\n    ),\n    routes = [],\n    handle: NextApiRouteHandler = async (req, res) => {\n      try {\n        let q = req.query[key];\n        let baseUrl = req.url\n          .split(\"/\")\n          .filter((u) =>\n            q && Array.isArray(q) ? !q.some((i) => i === u) : !q.includes(u)\n          )\n          .join(\"/\");\n        delete req.query[key];\n        let regex = (u: string) =>\n            RegExp(\n              `^${(baseUrl + u)\n                .replace(/(\\/?)\\*/g, \"($1.*)?\")\n                .replace(/\\/$/, \"\")\n                .replace(/:(\\w+)(\\?)?(\\.)?/g, \"$2(?<$1>[^/]+)$2$3\")\n                .replace(/\\.(?=[\\w(])/, \"\\\\.\")\n                .replace(/\\)\\.\\?\\(([^\\[]+)\\[\\^/g, \"?)\\\\.?($1(?<=\\\\.)[^\\\\.\")}/*$`\n            ),\n          match: RegExpExecArray,\n          next: any,\n          timeOut: NodeJS.Timeout;\n        if (timeout) {\n          timeOut = setTimeout(() => {\n            clearTimeout(timeOut);\n            onError(new TimeoutError(\"Request timeout\"), req, res);\n          }, timeout);\n        }\n        for (let [method, pathname, handlers] of routes) {\n          if (\n            (method === req.method || method === \"ALL\") &&\n            (match = regex(pathname).exec(req.url))\n          ) {\n            req.params = match.groups;\n            for (let handler of handlers) {\n              next = await handler(req, res);\n              if (res.writableFinished) {\n                if (timeOut) clearTimeout(timeOut);\n                break;\n              }\n              if (next) continue;\n            }\n          }\n        }\n      } catch (e) {\n        return onError(e, req, res);\n      }\n    },\n    get = (obj: { handle: NextApiRouteHandler }, prop: string, c: any) =>\n      prop === \"handle\"\n        ? obj.handle.bind(obj)\n        : (url: string, ...handlers: any) =>\n            routes.push([prop.toUpperCase(), url, handlers]) && c;\n  type HH = (m: string, ...k: NextApiRouteHandler[]) => void;\n  return new Proxy<{\n    [k: string]: NextApiRouteHandler & HH;\n  }>(\n    {\n      // @ts-ignore\n      handle,\n    },\n    { get }\n  );\n}\n"],
  "mappings": "AASO,mBAA2B,MAAM,GAMzB,WAAuB,EAInC,CACD,GAAI,CAAE,MAAK,UAAS,WAAY,OAAO,OACnC,CACE,IAAK,MACL,QAAS,IACT,QAAS,CAAC,EAAU,EAAyB,IAAyB,CACpE,GAAI,YAAa,GACf,EAAI,OAAO,KAAK,KAAK,8BAErB,MAAM,KAIZ,GAEF,EAAS,GACT,EAA8B,MAAO,EAAK,IAAQ,CAChD,GAAI,CACF,GAAI,GAAI,EAAI,MAAM,GACd,EAAU,EAAI,IACf,MAAM,KACN,OAAO,AAAC,GACP,GAAK,MAAM,QAAQ,GAAK,CAAC,EAAE,KAAK,AAAC,GAAM,IAAM,GAAK,CAAC,EAAE,SAAS,IAE/D,KAAK,KACR,MAAO,GAAI,MAAM,GACjB,GAAI,GAAQ,AAAC,GACT,OACE,IAAK,GAAU,GACZ,QAAQ,WAAY,WACpB,QAAQ,MAAO,IACf,QAAQ,oBAAqB,sBAC7B,QAAQ,cAAe,OACvB,QAAQ,wBAAyB,gCAExC,EACA,EACA,EACF,AAAI,GACF,GAAU,WAAW,IAAM,CACzB,aAAa,GACb,EAAQ,GAAI,GAAa,mBAAoB,EAAK,IACjD,IAEL,OAAS,CAAC,EAAQ,EAAU,IAAa,GACvC,GACG,KAAW,EAAI,QAAU,IAAW,QACpC,GAAQ,EAAM,GAAU,KAAK,EAAI,MAClC,CACA,EAAI,OAAS,EAAM,OACnB,OAAS,KAAW,GAElB,GADA,EAAO,KAAM,GAAQ,EAAK,GACtB,EAAI,iBAAkB,CACxB,AAAI,GAAS,aAAa,GAC1B,cAMD,EAAP,CACA,MAAO,GAAQ,EAAG,EAAK,KAG3B,EAAM,CAAC,EAAsC,EAAc,IACzD,IAAS,SACL,EAAI,OAAO,KAAK,GAChB,CAAC,KAAgB,IACf,EAAO,KAAK,CAAC,EAAK,cAAe,EAAK,KAAc,EAE9D,MAAO,IAAI,OAGT,CAEE,UAEF,CAAE",
  "names": []
}
